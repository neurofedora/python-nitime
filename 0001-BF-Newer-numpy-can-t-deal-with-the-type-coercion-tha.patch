From d6074cbcd11c193aa00955782a198fd81cca3f56 Mon Sep 17 00:00:00 2001
From: arokem <arokem@gmail.com>
Date: Fri, 30 Oct 2015 13:35:59 -0700
Subject: [PATCH] BF: Newer numpy can't deal with the type coercion that comes
 with inplace div.

---
 nitime/tests/test_timeseries.py |  6 +++---
 nitime/timeseries.py            | 16 ++++++++--------
 2 files changed, 11 insertions(+), 11 deletions(-)

diff --git a/nitime/tests/test_timeseries.py b/nitime/tests/test_timeseries.py
index c9dd49c..9e042d1 100644
--- a/nitime/tests/test_timeseries.py
+++ b/nitime/tests/test_timeseries.py
@@ -89,7 +89,7 @@ def test_TimeArray_math():
     tnew = timeunits + list(range(10))
     npt.assert_equal(tnew, timeunits+time1) # recall that time1 was 0-10ms
 
-    
+
 
 def test_TimeArray_comparison():
     "Comparison with unitless quantities should convert to TimeArray units"
@@ -330,7 +330,7 @@ def test_UniformTime_index_at():
 def test_TimeArray_getset():
     t1 = ts.TimeSeries(data = np.random.rand(2, 3, 4), sampling_rate=1)
     npt.assert_equal(t1[0],t1.data[...,0])
-    
+
 
 
 
@@ -542,7 +542,7 @@ def test_TimeSeries():
     tseries2 = tseries1 * 2
     npt.assert_equal(tseries1.data * 2, tseries2.data)
     npt.assert_equal(tseries1.time, tseries2.time)
-    tseries2 /= 2
+    tseries2 = tseries2 / 2
     npt.assert_equal(tseries1.data, tseries2.data)
     npt.assert_equal(tseries1.time, tseries2.time)
 
diff --git a/nitime/timeseries.py b/nitime/timeseries.py
index 86710ec..70dd02a 100644
--- a/nitime/timeseries.py
+++ b/nitime/timeseries.py
@@ -290,7 +290,7 @@ class TimeArray(np.ndarray, TimeInterface):
     def __eq__(self,val):
         val = self._convert_if_needed(val)
         return np.ndarray.__eq__(self,val)
-    
+
     def min(self, *args,**kwargs):
         ret = TimeArray(np.ndarray.min(self, *args,**kwargs),
             time_unit=base_unit)
@@ -320,17 +320,17 @@ class TimeArray(np.ndarray, TimeInterface):
             time_unit=base_unit)
         ret.convert_unit(self.time_unit)
         return ret
-    
+
     def prod(self, *args, **kwargs):
         e_s = "Product computation changes TimeArray units"
         raise NotImplementedError(e_s)
-        
-    
+
+
     def var(self, *args, **kwargs):
         e_s = "Variance computation changes TimeArray units"
         raise NotImplementedError(e_s)
 
-        
+
     def std(self, *args, **kwargs):
         """Returns the standard deviation of this TimeArray (with time units)
 
@@ -1000,9 +1000,9 @@ class TimeSeriesBase(object):
 
     def __div__(self, other):
         out = self.copy()
-        out.data = out.data.__div__(other)
+        out.data = out.data.__truediv__(other)
         return out
-    
+
     __truediv__ =  __div__ # for py3k
 
     def __iadd__(self, other):
@@ -1077,7 +1077,7 @@ class TimeSeries(TimeSeriesBase):
         t0 : float
           If you provide a sampling rate, you can optionally also provide a
           starting time.
-        time 
+        time
           Instead of sampling rate, you can explicitly provide an object of
           class UniformTime. Note that you can still also provide a different
           sampling_rate/sampling_interval/duration to take the place of the
-- 
2.6.2

